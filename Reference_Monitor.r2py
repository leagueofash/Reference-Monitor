"""
This security layer interposes on a textfile 
and gives it open, close, read and write access.
However, a user should prevent any   

1) Uppercase letters from being  replaced by lowercase letters 
2) Reads that mix upper and lower case
If a user tries to the security layer will raise an exception.
Note:
  This security layer uses encasementlib.r2py, restrictions.default, repy.py and python
  Also you need to give it an application to run.
  This security layer never runs explicitly but instead interposes functions
  from above layers. 

	"""	

# This is just an example global variable.   It stores a list of the calls the application makes.[[BR]]
BUFFER = []
class SecureFile():
  def __init__(self,privilegedfo):
    self.privilegedfo = privilegedfo
    mycontext['lock'] = createlock()
    mycontext['file_data'] = self.privilegedfo.readat(None,0)
    #log(mycontext['file_data'])
  
  def readat(self,bytes,offset):
    BUFFER.append("readat")
    mycontext['lock'].acquire(bool(1))
    #str = self.privilegedfo.readat(bytes,offset)
    s = mycontext['file_data'] 
    if bytes < 0:
	mycontext['lock'].release()
	raise ValueError
    if bytes is None:
	bytes = len(mycontext['file_data'])
    x = bytes+offset
    a = s[offset:x] 
    l = []
    for i in a:
	if i.isalpha():
	    l.append(i)
    l = ''.join(l)
    if l.isalpha():
        if not l.isupper() and not l.islower(): 
            mycontext['lock'].release()
            raise ValueError 
	#else:
    #else:
    mycontext['lock'].release()
    return a

  def writeat(self,data,offset):
    BUFFER.append("writeat")
    mycontext['lock'].acquire(bool(1))
    #str = self.privilegedfo.readat(len(data),offset)
    #str_list = list(str)
    if offset < 0:
	mycontext['lock'].release()
	raise ValueError
    if offset > len(mycontext['file_data']):
	mycontext['lock'].release()
	raise ValueError
    if not mycontext['file_data']:
	mycontext['file_data'] = data
	mycontext['lock'].release()
	self.privilegedfo.writeat(mycontext['file_data'],0)
    else:
	s = mycontext['file_data']
	data_str = list(data)
	length = len(data)
	length = length + offset
	sub_string = s[offset:length]
	#for i in range(index,x):
	#    a.append(s[i])
	#a = ''.join(a)
	for i,j in zip(sub_string,data_str):
            if i.isupper() and j.islower():
		mycontext['lock'].release() 
                raise ValueError
	    elif i.isupper() and ord(j)>127: #disallow an uppercase be overwritten by a random character whose value is greater than defined ASCII table value as that may contain a small letter
	        mycontext['lock'].release()
		raise ValueError
            else:
		continue
		
	s = s[:offset]+data+s[length:]
	mycontext['file_data'] = s
	mycontext['lock'].release()
    	self.privilegedfo.writeat(mycontext['file_data'],0)
    
  def close(self):
    BUFFER.append("close")
    return self.privilegedfo.close()

def secure_openfile(filename, create):
  BUFFER.append("openfile")
  # Open a file from the layer below (likely the sandbox)
  try:
      privilegedfo = openfile(filename,create)  
  except:
      raise ValueError
  else:
      return SecureFile(privilegedfo)

# You can ignore the code below here.   It just sets of the security layer so that the application calls it instead of
# the original API functions.
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

sec_file_def = {"obj-type":SecureFile,
    "name":"SecureFile",
    "readat":{TYPE:FUNC,ARGS:((int,long,type(None)),(int,long)),EXCP:Exception,RETURN:str,TARGET:SecureFile.readat},
    "writeat":{TYPE:FUNC,ARGS:(str,(int,long)),EXCP:Exception,RETURN:(None),TARGET:SecureFile.writeat},
    "close":{TYPE:FUNC,ARGS:None,EXCP:None,RETURN:(bool,type(None)),TARGET:SecureFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:secure_openfile}

secure_dispatch_module()
